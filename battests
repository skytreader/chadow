# vim: set ft=sh:

py="python"
if [ $FULL_TESTING -eq 1 ]; then
    # Necessary because for some reason virtualenv workon, alias, etc. does not
    # work in bats.
    py="/home/$(whoami)/.virtualenvs/chadow/bin/python"
fi

CHADOW_DIR="/home/$(whoami)/.chadow"
EHD_1="/media/chadow/mock-fs-1"
EHD_1_SANITIZED="+media+chadow+mock-fs-1"
EHD_2="/media/chadow/mock-fs-2"
EHD_2_SANITIZED="+media+chadow+mock-fs-2"

# Exit codes
CONFIG_NOT_FOUND=1
METADATA_NOT_FOUND=2
STATE_CONFLICT=3
INVALID_ARG=4
PERMISSIONS_PROBLEM=5

setup() {
    ./install
}

@test "that config.json exists after setup" {
    ls ~/.chadow/config.json
    config_ver=`jq .version ~/.chadow/config.json | sed 's/"//g'`
    repo_ver=`head -n 1 VERSION`
    [ "$config_ver" == "$repo_ver" ]
    libraries=`jq .libraryMapping ~/.chadow/config.json`
    [ $libraries == "{}" ]
}

@test "that createlib works as expected" {
    [ ! -d ~/.chadow/test1 ]
    $py chadow.py createlib test1
    [ -d ~/.chadow/test1 ]
    library_sectors=`jq .libraryMapping.test1.sectors ~/.chadow/config.json`
    [ "$library_sectors" == "{}" ]
}

@test "that createlib won't overwrite existing libraries" {
    [ ! -d ~/.chadow/test1 ]
    $py chadow.py createlib test1
    [ -d ~/.chadow/test1 ]
    set +e
    $py chadow.py createlib test1
    recreate_rc=$?
    set -e
    [ $recreate_rc -eq $STATE_CONFLICT ]
}

@test "that createlib can handle botched installs gracefully" {
    echo "balderdash" > ~/.chadow/config.json
    $py chadow.py createlib test1

    config_ver=`jq .version ~/.chadow/config.json | sed 's/"//g'`
    repo_ver=`head -n 1 VERSION`
    [ "$config_ver" == "$repo_ver" ]
    
    library_sectors=`jq .libraryMapping.test1.sectors ~/.chadow/config.json`
    [ "$library_sectors" == "{}" ]
}

@test "that deletelib works as expected" {
    $py chadow.py createlib test1
    library_sectors=`jq .libraryMapping.test1.sectors ~/.chadow/config.json`
    [ "$library_sectors" == "{}" ]
    $py chadow.py deletelib test1
    libraries=`jq .libraryMapping ~/.chadow/config.json`
    [ "$libraries" == "{}" ]

    echo "Test that deletelib exits properly when deleting nonexistent library"
    set +e
    $py chadow.py deletelib never_existed
    delete_rc=$?
    set -e
    [ $delete_rc -eq $STATE_CONFLICT ]
}

@test "that regsector does not accept sector names with the path separator" {
    # Why impose this constraint again?
    $py chadow.py createlib test1
    set +e
    $py chadow.py regsector test1 sector1/spam
    invalid_name=$?
    set -e
    [ $invalid_name -eq $INVALID_ARG ]
}

@test "that regsector works just as expected" {
    $py chadow.py createlib test1
    $py chadow.py regsector test1 sector1
    sector_paths=`jq .libraryMapping.test1.sectors.sector1 ~/.chadow/config.json | sed 's/ //g'`
    [ "$sector_paths" == "[]" ]
    echo "$CHADOW_DIR/test1/sector1"
    [ -d "$CHADOW_DIR/test1/sector1" ]
}

@test "that regmedia works as expected" {
    $py chadow.py createlib test1
    $py chadow.py regsector test1 sector1
    [ ! -d ~/.chadow/test1/sector1/$EHD_1_SANITIZED ]
    $py chadow.py regmedia test1 sector1 $EHD_1
    [ -d ~/.chadow/test1/sector1/$EHD_1_SANITIZED ]
    metadata=`head -n1 $EHD_1/.chadow-metadata`
    [ "$metadata" == "sector1" ]
    list_contents=`jq .libraryMapping.test1.sectors.sector1 ~/.chadow/config.json | grep $EHD_1 | sed 's/"//g' | sed 's/ //g'`
    [ "$list_contents" == "$EHD_1" ]
    $py chadow.py regmedia test1 sector1 $EHD_2
}

@test "that regmedia will not relabel existing sectors" {
    $py chadow.py createlib test1
    $py chadow.py regsector test1 sector1
    $py chadow.py regmedia test1 sector1 $EHD_1
    set +e
    $py chadow.py regmedia test1 relabel $EHD_1
    relabel=$?
    set -e
    [ $relabel -eq $STATE_CONFLICT ]
}

@test "that regmedia informs users properly of metadata problems" {
    $py chadow.py createlib test1
    set +e
    $py chadow.py regmedia test1 sector1 /media/totally-wrong
    totes_wrong=$?
    set -e
    [ $totes_wrong -eq $METADATA_NOT_FOUND ]
}

@test "that regmedia will not accept paths with the '+' character" {
    $py chadow.py createlib library
    $py chadow.py regsector library sector1
    set +e
    $py chadow.py regmedia library sector1 /media/audio+video
    error_code=$?
    set -e
    [ $error_code -eq $INVALID_ARG ]
}

@test "that index works as expected" {
    # Set-up the directory to index
    [ -d $EHD_1 ]
    touch "$EHD_1/root.txt"
    mkdir "$EHD_1/directory1"
    touch "$EHD_1/directory1/dir1.txt"

    # Set-up everything for chadow and index EHD1
    $py chadow.py createlib test1
    $py chadow.py regsector test1 sector1
    $py chadow.py regmedia test1 sector1 $EHD_1
    $py chadow.py index test1 sector1 $EHD_1
    index_file="$CHADOW_DIR/test1/sector1/$EHD_1_SANITIZED/index.json"
    [ -e $index_file ]
    index_ver=`jq .version $index_file | sed 's/"//g'`
    repo_ver=`head -n 1 VERSION`
    [ "$index_ver" == "$repo_ver" ]

    root_txt=`jq '.index | map(select(. == "root.txt"))' $index_file`
    [ "$root_txt" != "[]" ]

    dir1=`jq '.index[] | objects | select(.subdir == "directory1")' $index_file`
    [ "$dir1" != "" ]
    dne=`jq '.index[] | objects | select(.subdir == "does not exist")' $index_file`
    [ "$dne" == "" ]
}

teardown() {
    ./uninstall

    if [ -f $EHD_1/.chadow-metadata ]; then
        rm $EHD_1/.chadow-metadata
    fi
    if [ -f $EHD_2/.chadow-metadata ]; then
        rm $EHD_2/.chadow-metadata
    fi
}

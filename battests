# vim: set ft=sh:

# Necessary because for some reason virtualenv workon, alias, etc. does not
# work in bats.
py="/home/$(whoami)/.virtualenvs/chadow/bin/python"

EHD_1="/media/chadow/mock-fs-1"
EHD_1_SANITIZED="-media-chadow-mock-fs-1"
EHD_2="/media/chadow/mock-fs-2"
EHD_2_SANITIZED="-media-chadow-mock-fs-2"

setup() {
    ./install
}

@test "chadow java bin" {
    chadow -cmd blah
}

@test "that config.json exists after setup" {
    ls ~/.chadow/config.json
    config_ver=`jq .version ~/.chadow/config.json | sed 's/"//g'`
    repo_ver=`head -n 1 VERSION`
    [ "$config_ver" == "$repo_ver" ]
    libraries=`jq .libraryMapping ~/.chadow/config.json`
    [ $libraries == "{}" ]
}

@test "that createlib works as expected" {
    $py chadow.py createlib test1
    library_sectors=`jq .libraryMapping.test1.sectors ~/.chadow/config.json`
    [ "$library_sectors" == "{}" ]
    
    echo "Test that createlib won't overwrite existing libraries"
    set +e
    $py chadow.py createlib test1
    recreate_rc=$?
    set -e
    [ $recreate_rc -eq 3 ]
}

@test "that createlib can handle botched installs gracefully" {
    echo "balderdash" > ~/.chadow/config.json
    $py chadow.py createlib test1

    config_ver=`jq .version ~/.chadow/config.json | sed 's/"//g'`
    repo_ver=`head -n 1 VERSION`
    [ "$config_ver" == "$repo_ver" ]
    
    library_sectors=`jq .libraryMapping.test1.sectors ~/.chadow/config.json`
    [ "$library_sectors" == "{}" ]
}

@test "that deletelib works as expected" {
    $py chadow.py createlib test1
    library_sectors=`jq .libraryMapping.test1.sectors ~/.chadow/config.json`
    [ "$library_sectors" == "{}" ]
    $py chadow.py deletelib test1
    libraries=`jq .libraryMapping ~/.chadow/config.json`
    [ "$libraries" == "{}" ]

    echo "Test that deletelib exits properly when deleting nonexistent library"
    set +e
    $py chadow.py deletelib never_existed
    delete_rc=$?
    set -e
    [ $delete_rc -eq 3 ]
}

@test "that regsector works as expected" {
    $py chadow.py createlib test1
    $py chadow.py regsector test1 sector1 $EHD_1
    metadata=`head -n1 $EHD_1/.chadow-metadata`
    [ "$metadata" == "sector1" ]
}

@test "that regsector will not relabel existing sectors" {
    $py chadow.py createlib test1
    $py chadow.py regsector test1 sector1 $EHD_1
    set +e
    $py chadow.py regsector test1 relabel $EHD_1
    relabel=$?
    set -e
    echo $relabel
    [ $relabel -eq 3 ]
}

@test "that regsector informs users properly of metadata problems" {
    $py chadow.py createlib test1
    set +e
    $py chadow.py regsector test1 sector1 /media/totally-wrong
    totes_wrong=$?
    set -e
    [ $totes_wrong -eq 2 ]
}

@test "that regsector does not accept sector names with the path separator" {
    $py chadow.py createlib test1
    set +e
    $py chadow.py regsector test1 sector1/spam $EHD_1
    invalid_name=$?
    set -e
    [ $invalid_name -eq 4 ]
}

teardown() {
    ./uninstall
    if [ -f $EHD_1/.chadow-metadata ]; then
        rm $EHD_1/.chadow-metadata
    fi
    if [ -f $EHD_2/.chadow-metadata ]; then
        rm $EHD_2/.chadow-metadata
    fi
}
